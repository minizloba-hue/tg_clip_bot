import os
import asyncio
import logging
import gspread
from aiogram import Bot, Dispatcher, executor, types
from dotenv import load_dotenv
from oauth2client.service_account import ServiceAccountCredentials

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
GSHEET_KEY = os.getenv("GSHEET_KEY")
SHEET_NAME = os.getenv("SHEET_NAME")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds","https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(GSHEET_KEY, scope)
client = gspread.authorize(creds)
sheet = client.open(SHEET_NAME).sheet1

# –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
db = {}

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã
async def update_db():
    global db
    records = sheet.get_all_records()
    # –∫–ª—é—á = code, –∑–Ω–∞—á–µ–Ω–∏–µ = —Å–ª–æ–≤–∞—Ä—å —Å title, banner, ref_link
    db = {
        str(row["code"]).strip(): {
            "title": str(row["title"]).strip(),
            "banner": str(row["banner"]).strip(),
            "ref_link": str(row["ref_link"]).strip()
        }
        for row in records if row.get("code")
    }
    logging.info(f"–ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. {len(db)} –∑–∞–ø–∏—Å–µ–π.")

# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
async def auto_update():
    while True:
        try:
            await update_db()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await asyncio.sleep(600)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–¥, –∏ —è –¥–∞–º —Ç–µ–±–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –±–∞–Ω–Ω–µ—Ä –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É üöÄ")

# –ö–æ–º–∞–Ω–¥–∞ /update (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.message_handler(commands=["update"])
async def manual_update(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await update_db()
        await message.answer("‚úÖ –ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é.")
    else:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–æ–≤
@dp.message_handler()
async def send_clip_info(message: types.Message):
    code = message.text.strip()
    if code in db:
        item = db[code]
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ", url=item["ref_link"]))
        await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {item['title']}", reply_markup=kb)
        if item["banner"]:
            await message.answer_photo(item["banner"])
    else:
        await message.answer("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
async def on_startup(dp):
    await update_db()
    asyncio.create_task(auto_update())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
